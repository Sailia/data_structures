{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red0\green0\blue192;
\red106\green62\blue62;\red42\green0\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c0\c0\c75294;
\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c16471\c0\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 // shared resources between thread 1 and thread 2 are:\cf0 \
	\cf2 // DONOT CHANGE THESE VARIABLE\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 int\cf0  \cf4 BufferSize\cf0  = 5; 					\cf2 //the size of the buffer\cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 int\cf0  \cf4 count\cf0  = 0;      					\cf2 //keeps track of the number of items currently in buffer \cf0 \
	\cf3 public\cf0  \cf3 static\cf0  \cf3 int\cf0  \cf4 buffer\cf0 [] = \cf3 new\cf0  \cf3 int\cf0 [\cf4 BufferSize\cf0 ];	\cf2 //the buffer to add data into and consume data from\cf0 \
	\
	\
	\cf2 // add below any further resources you think the producer and consumer functions must share\cf0 \
	\cf3 static\cf0  Lock \cf4 lock\cf0  = \cf3 new\cf0  ReentrantLock();\
	\
\
\pard\pardeftab720\partightenfactor0
\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  Producer(\cf3 int\cf0  \cf5 item\cf0 )\{\
	    \cf3 try\cf0  \{\
	    		\
	    		System.\cf4 out\cf0 .println(\cf6 "The Producer is trying to add the new item ("\cf0 + \cf5 item\cf0  +\cf6 ") to the shared buffer"\cf0 );\
				   \
	    		\cf2 // Add the input item only if there is a free space in the shared buffer\cf0 \
	    		\cf2 // Producer waits until this condition is true, thus use while rather than if statements\cf0 \
	    		\cf2 // Call the displayStatus() function after you add the item and before release the lock\cf0 \
	    		\cf2 // Implement the producer functionality in the area below\cf0 \
	    		\cf3 while\cf0 (\cf3 true\cf0 ) \{\
		    		\cf3 while\cf0 (\cf4 count\cf0  == \cf4 BufferSize\cf0 );\
		    		\cf4 lock\cf0 .lock();\
		    		\cf4 buffer\cf0 [\cf4 count\cf0 ] = \cf5 item\cf0 ;\
		    		\cf4 count\cf0 ++;\
		    		displayStatus();\
		    		\cf4 lock\cf0 .unlock();\
	    		\}	\
	    		\cf2 //--------------------------------------------end of Producer function\cf0 \
				\
	   	\} \cf3 catch\cf0  (Exception \cf5 e\cf0 ) \{\
	   		System.\cf4 out\cf0 .println(\cf6 "Problem with the producer function "\cf0 +\cf5 e\cf0 .toString());\
	   	\}\
	\}\
		\
\pard\pardeftab720\partightenfactor0
\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  Consumer()\{\
	    \cf3 try\cf0  \{\
    			\
	    		System.\cf4 out\cf0 .println(\cf6 "The Consumer is trying to consume the ready item from the buffer"\cf0 );\
				\
	    		\
	    		\cf2 // Consume one item (overwrite its value with -1) from the buffer only if there is an available item in the buffer \cf0 \
	    		\cf2 // Consumer waits until this condition is true, thus use while rather than if statements\cf0 \
	    		\cf2 // Call the displayStatus() function after you remove the item and before release the lock\cf0 \
    			\cf2 // Implement the consumer functionality in the area below\cf0 \
    		\
	    		\cf3 while\cf0 (\cf3 true\cf0 ) \{\
	    			\
	    				\cf3 while\cf0 (\cf4 count\cf0  == 0);\
	    				\cf4 lock\cf0 .lock();\
	    				\cf4 buffer\cf0 [\cf4 count\cf0 -1] = -1;\
	    				\cf4 count\cf0 --;\
	    				displayStatus();\
	    				\cf4 lock\cf0 .unlock();\
	    		\}\
    		\
	    		\cf2 //--------------------------------------------end of Consumer function\cf0 \
				\
\
	   	\} \cf3 catch\cf0  (Exception \cf5 e\cf0 ) \{\
	   		System.\cf4 out\cf0 .println(\cf6 "Problem with the consumer function "\cf0 +\cf5 e\cf0 .toString());\
	   	\}\
	\}	\
\pard\pardeftab720\partightenfactor0
\cf0 \
	\
	}